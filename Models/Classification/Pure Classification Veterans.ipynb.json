{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "import sklearn\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn import metrics\n",
    "from sklearn.cluster import AgglomerativeClustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(4242)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "pd.set_option('display.max_columns', None)\n",
    "pd.options.mode.chained_assignment = None "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import sklearn.preprocessing, sklearn.decomposition, sklearn.linear_model, sklearn.pipeline, sklearn.metrics\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn_pandas import DataFrameMapper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>SalStartYr</th>\n",
       "      <th>Salary</th>\n",
       "      <th>GS</th>\n",
       "      <th>MP</th>\n",
       "      <th>FG</th>\n",
       "      <th>FGA</th>\n",
       "      <th>FG%</th>\n",
       "      <th>3P</th>\n",
       "      <th>3PA</th>\n",
       "      <th>3P%</th>\n",
       "      <th>2P</th>\n",
       "      <th>2PA</th>\n",
       "      <th>2P%</th>\n",
       "      <th>eFG%</th>\n",
       "      <th>FT</th>\n",
       "      <th>FTA</th>\n",
       "      <th>FT%</th>\n",
       "      <th>ORB</th>\n",
       "      <th>DRB</th>\n",
       "      <th>TRB</th>\n",
       "      <th>AST</th>\n",
       "      <th>STL</th>\n",
       "      <th>BLK</th>\n",
       "      <th>TOV</th>\n",
       "      <th>PF</th>\n",
       "      <th>PTS</th>\n",
       "      <th>years_of_exp</th>\n",
       "      <th>salary_cap</th>\n",
       "      <th>Per_of_Salary_Cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7454</td>\n",
       "      <td>2001</td>\n",
       "      <td>5062500.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>14.5</td>\n",
       "      <td>1.5</td>\n",
       "      <td>3.8</td>\n",
       "      <td>0.387</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.3</td>\n",
       "      <td>0.400</td>\n",
       "      <td>1.3</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0.386</td>\n",
       "      <td>0.405</td>\n",
       "      <td>0.7</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.583</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.4</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.9</td>\n",
       "      <td>3.8</td>\n",
       "      <td>4</td>\n",
       "      <td>42500000</td>\n",
       "      <td>0.119118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7455</td>\n",
       "      <td>2001</td>\n",
       "      <td>11250000.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>7.5</td>\n",
       "      <td>15.8</td>\n",
       "      <td>0.472</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.8</td>\n",
       "      <td>0.188</td>\n",
       "      <td>7.3</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.487</td>\n",
       "      <td>0.477</td>\n",
       "      <td>5.5</td>\n",
       "      <td>6.6</td>\n",
       "      <td>0.834</td>\n",
       "      <td>2.2</td>\n",
       "      <td>6.9</td>\n",
       "      <td>9.1</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.9</td>\n",
       "      <td>2.9</td>\n",
       "      <td>20.5</td>\n",
       "      <td>5</td>\n",
       "      <td>42500000</td>\n",
       "      <td>0.264706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7456</td>\n",
       "      <td>2001</td>\n",
       "      <td>1995741.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.7</td>\n",
       "      <td>0.7</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0.321</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.6</td>\n",
       "      <td>0.250</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.350</td>\n",
       "      <td>0.357</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.7</td>\n",
       "      <td>0.667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6</td>\n",
       "      <td>42500000</td>\n",
       "      <td>0.046959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7457</td>\n",
       "      <td>2001</td>\n",
       "      <td>1418400.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>21.3</td>\n",
       "      <td>3.7</td>\n",
       "      <td>8.8</td>\n",
       "      <td>0.417</td>\n",
       "      <td>0.3</td>\n",
       "      <td>0.7</td>\n",
       "      <td>0.370</td>\n",
       "      <td>3.4</td>\n",
       "      <td>8.1</td>\n",
       "      <td>0.421</td>\n",
       "      <td>0.432</td>\n",
       "      <td>1.9</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0.820</td>\n",
       "      <td>0.6</td>\n",
       "      <td>1.6</td>\n",
       "      <td>2.2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.7</td>\n",
       "      <td>0.1</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.1</td>\n",
       "      <td>9.5</td>\n",
       "      <td>1</td>\n",
       "      <td>42500000</td>\n",
       "      <td>0.033374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7458</td>\n",
       "      <td>2001</td>\n",
       "      <td>11250000.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>38.2</td>\n",
       "      <td>7.7</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.480</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.7</td>\n",
       "      <td>0.433</td>\n",
       "      <td>5.2</td>\n",
       "      <td>10.3</td>\n",
       "      <td>0.506</td>\n",
       "      <td>0.557</td>\n",
       "      <td>4.2</td>\n",
       "      <td>4.8</td>\n",
       "      <td>0.888</td>\n",
       "      <td>1.2</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>4.6</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.3</td>\n",
       "      <td>22.0</td>\n",
       "      <td>5</td>\n",
       "      <td>42500000</td>\n",
       "      <td>0.264706</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  SalStartYr      Salary    GS    MP   FG   FGA    FG%   3P  3PA  \\\n",
       "0        7454        2001   5062500.0  12.0  14.5  1.5   3.8  0.387  0.1  0.3   \n",
       "1        7455        2001  11250000.0  81.0  40.0  7.5  15.8  0.472  0.1  0.8   \n",
       "2        7456        2001   1995741.0   0.0   8.7  0.7   2.2  0.321  0.2  0.6   \n",
       "3        7457        2001   1418400.0  24.0  21.3  3.7   8.8  0.417  0.3  0.7   \n",
       "4        7458        2001  11250000.0  82.0  38.2  7.7  16.0  0.480  2.5  5.7   \n",
       "\n",
       "     3P%   2P   2PA    2P%   eFG%   FT  FTA    FT%  ORB  DRB  TRB  AST  STL  \\\n",
       "0  0.400  1.3   3.5  0.386  0.405  0.7  1.2  0.583  0.5  1.6  2.0  0.8  0.5   \n",
       "1  0.188  7.3  15.0  0.487  0.477  5.5  6.6  0.834  2.2  6.9  9.1  3.1  1.1   \n",
       "2  0.250  0.5   1.5  0.350  0.357  0.5  0.7  0.667  0.0  1.0  1.0  1.4  0.6   \n",
       "3  0.370  3.4   8.1  0.421  0.432  1.9  2.3  0.820  0.6  1.6  2.2  1.0  0.7   \n",
       "4  0.433  5.2  10.3  0.506  0.557  4.2  4.8  0.888  1.2  4.0  5.2  4.6  1.5   \n",
       "\n",
       "   BLK  TOV   PF   PTS  years_of_exp  salary_cap  Per_of_Salary_Cap  \n",
       "0  0.4  1.2  1.9   3.8             4    42500000           0.119118  \n",
       "1  1.0  2.9  2.9  20.5             5    42500000           0.264706  \n",
       "2  0.0  1.0  1.1   2.0             6    42500000           0.046959  \n",
       "3  0.1  1.2  2.1   9.5             1    42500000           0.033374  \n",
       "4  0.2  2.5  2.3  22.0             5    42500000           0.264706  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adv_df = pd.read_csv('https://raw.githubusercontent.com/cmhamakawa/Data_Science_NBA_Project/master/Datasets/preprocessed_nba_dataset(w_years_of_exp).csv')\n",
    "adv_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "adv_df.drop(adv_df.columns[0], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# getting subset of data which we deemed to be our best columns as predictors of salary\n",
    "christine_subset = adv_df[['FG', 'FTA', 'AST', 'TRB', 'PTS', 'BLK', 'years_of_exp','Salary','SalStartYr','TOV']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# getting veterans data \n",
    "christine_subset = christine_subset[christine_subset['years_of_exp'] != 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1987800.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#first quartile\n",
    "q1 = christine_subset['Salary'].quantile(.25)\n",
    "q1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9265833.0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#first quartile\n",
    "q3 = christine_subset['Salary'].quantile(.75)\n",
    "q3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7278033.0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#interquartile range\n",
    "iqr = q3 - q1\n",
    "iqr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-8929249.5"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#lower limit for outliers, lower than 0 so no need to account for\n",
    "lower = q1 - 1.5 * iqr\n",
    "lower"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20182882.5"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#upper limit for outliers\n",
    "upper = q3 + 1.5 * iqr\n",
    "upper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# removing outliers, aka all stars \n",
    "christine_subset = christine_subset[christine_subset['Salary'] < upper]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import preprocessing\n",
    "le = preprocessing.LabelEncoder()\n",
    "christine_subset['SalStartYr'] = le.fit_transform(christine_subset['SalStartYr'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "from sklearn import metrics\n",
    "from scipy.spatial.distance import cdist\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as pl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# getting salary data to be used for clustering\n",
    "to_elbow = pd.DataFrame(christine_subset['Salary'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "distortions = []\n",
    "inertias = []\n",
    "\n",
    "K = range(1, 10)\n",
    " \n",
    "for k in K:\n",
    "    # Building and fitting the model\n",
    "    kmeanModel = KMeans(n_clusters=k).fit(to_elbow)\n",
    "    kmeanModel.fit(to_elbow)\n",
    " \n",
    "    distortions.append(sum(np.min(cdist(to_elbow, kmeanModel.cluster_centers_,\n",
    "                                        'euclidean'), axis=1)) / to_elbow.shape[0])\n",
    "    \n",
    "    inertias.append(kmeanModel.inertia_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting the values to determine point of inflection aka the \"elbow\" of the graphplt.plot(K, distortions, 'bx-')\n",
    "plt.xlabel('Values of K')\n",
    "plt.ylabel('Inertia')\n",
    "plt.title('The Elbow Method using Inertia')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 4 seemed to be optimal according to the above graph\n",
    "kmeans=KMeans(n_clusters=4,random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KMeans(n_clusters=4, random_state=1)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kmeans.fit(to_elbow)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "to_elbow['Cluster'] = kmeans.labels_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 3, 2, 1], dtype=int32)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "to_elbow['Cluster'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5103, 2)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "to_elbow.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# adding cluster number column to the original data set\n",
    "christine_subset['Cluster'] = to_elbow['Cluster']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FG</th>\n",
       "      <th>FTA</th>\n",
       "      <th>AST</th>\n",
       "      <th>TRB</th>\n",
       "      <th>PTS</th>\n",
       "      <th>BLK</th>\n",
       "      <th>Salary</th>\n",
       "      <th>SalStartYr</th>\n",
       "      <th>TOV</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6217</th>\n",
       "      <td>2.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>3.3</td>\n",
       "      <td>3.8</td>\n",
       "      <td>6.9</td>\n",
       "      <td>0.3</td>\n",
       "      <td>9000000.0</td>\n",
       "      <td>19</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6218</th>\n",
       "      <td>4.2</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>4.9</td>\n",
       "      <td>10.3</td>\n",
       "      <td>0.4</td>\n",
       "      <td>13545000.0</td>\n",
       "      <td>19</td>\n",
       "      <td>1.6</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6219</th>\n",
       "      <td>9.1</td>\n",
       "      <td>9.3</td>\n",
       "      <td>9.3</td>\n",
       "      <td>4.3</td>\n",
       "      <td>29.6</td>\n",
       "      <td>0.1</td>\n",
       "      <td>6571800.0</td>\n",
       "      <td>19</td>\n",
       "      <td>4.8</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6220</th>\n",
       "      <td>4.3</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>7.1</td>\n",
       "      <td>11.1</td>\n",
       "      <td>0.4</td>\n",
       "      <td>15415730.0</td>\n",
       "      <td>19</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6221</th>\n",
       "      <td>3.3</td>\n",
       "      <td>2.3</td>\n",
       "      <td>1.1</td>\n",
       "      <td>7.5</td>\n",
       "      <td>8.3</td>\n",
       "      <td>0.9</td>\n",
       "      <td>7000000.0</td>\n",
       "      <td>19</td>\n",
       "      <td>0.8</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       FG  FTA  AST  TRB   PTS  BLK      Salary  SalStartYr  TOV  Cluster\n",
       "6217  2.6  1.4  3.3  3.8   6.9  0.3   9000000.0          19  1.0        3\n",
       "6218  4.2  1.1  1.8  4.9  10.3  0.4  13545000.0          19  1.6        3\n",
       "6219  9.1  9.3  9.3  4.3  29.6  0.1   6571800.0          19  4.8        0\n",
       "6220  4.3  3.1  1.5  7.1  11.1  0.4  15415730.0          19  1.3        1\n",
       "6221  3.3  2.3  1.1  7.5   8.3  0.9   7000000.0          19  0.8        0"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "christine_subset.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# How Well Can I Predict Clusters?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "pd.set_option('display.max_rows', None)\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# setting up predictor and target data \n",
    "X = christine_subset.drop(columns = ['Cluster','Salary'], axis = 1)\n",
    "y = christine_subset[['Cluster']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FG</th>\n",
       "      <th>FTA</th>\n",
       "      <th>AST</th>\n",
       "      <th>TRB</th>\n",
       "      <th>PTS</th>\n",
       "      <th>BLK</th>\n",
       "      <th>SalStartYr</th>\n",
       "      <th>TOV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.5</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.8</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.5</td>\n",
       "      <td>6.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>9.1</td>\n",
       "      <td>20.5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.7</td>\n",
       "      <td>0.7</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7.7</td>\n",
       "      <td>4.8</td>\n",
       "      <td>4.6</td>\n",
       "      <td>5.2</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.8</td>\n",
       "      <td>0.4</td>\n",
       "      <td>1.8</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    FG  FTA  AST  TRB   PTS  BLK  SalStartYr  TOV\n",
       "0  1.5  1.2  0.8  2.0   3.8  0.4           0  1.2\n",
       "1  7.5  6.6  3.1  9.1  20.5  1.0           0  2.9\n",
       "2  0.7  0.7  1.4  1.0   2.0  0.0           0  1.0\n",
       "4  7.7  4.8  4.6  5.2  22.0  0.2           0  2.5\n",
       "5  0.8  0.4  1.8  0.8   2.1  0.0           0  0.5"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# splitting into testing and training\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.40)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.581506360020898"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LR = LogisticRegression()\n",
    "cross_val_score(LR, X_train, y_train, cv = 5).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.        , 0.33333333, 0.66666667, 1.        , 1.33333333,\n",
       "       1.66666667, 2.        , 2.33333333, 2.66666667, 3.        ])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c_vals = np.linspace(0, 3, 10)\n",
    "c_vals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x12006e6d0>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1)\n",
    "\n",
    "best_score = 0\n",
    "best_c = 0\n",
    "\n",
    "# c_vals from 0-10\n",
    "c_vals = np.linspace(0, 3, 20)\n",
    "\n",
    "# loop through possible c_vals\n",
    "for c_val in c_vals:\n",
    "    \n",
    "    # evaluate the model with the current c_val\n",
    "    LR = LogisticRegression(C = c_val)\n",
    "    cv_score = cross_val_score(LR, X_train, y_train, cv=5).mean()\n",
    "    ax.scatter(c_val, cv_score, color = \"black\")\n",
    "    \n",
    "    # check if we've beaten our previous score\n",
    "    if cv_score > best_score:\n",
    "        best_c = c_val\n",
    "        best_score = cv_score\n",
    "\n",
    "l = ax.set(title = \"Best C : \" + str(best_c),\n",
    "       xlabel = \"C\", \n",
    "       ylabel = \"CV Score\")\n",
    "ax.scatter(best_c, best_score, color = \"red\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5841228356746161 0.5435847208619001\n"
     ]
    }
   ],
   "source": [
    "LR = LogisticRegression(C = best_c)\n",
    "LR.fit(X_train, y_train)\n",
    "print(LR.score(X_train,y_train),LR.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision Trees"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5396864237810404"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "T = DecisionTreeClassifier(max_depth = 2)\n",
    "cross_val_score(T, X_train, y_train, cv=5).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1)\n",
    "\n",
    "best_score = 0\n",
    "\n",
    "# cross validation for each of the possible model depths 1-30\n",
    "for d in range(1,30):\n",
    "    T = DecisionTreeClassifier(max_depth = d)\n",
    "    # Average cv_score acheived in cross validation\n",
    "    cv_score = cross_val_score(T, X_train, y_train, cv=10).mean()\n",
    "    # plot avg cv_score (in black)\n",
    "    ax.scatter(d, cv_score, color = \"black\")\n",
    "    # identify the best possible depth by cv_score\n",
    "    if cv_score > best_score:\n",
    "        best_depth = d\n",
    "        best_score = cv_score\n",
    "\n",
    "#highlight the best depth, best score value in red\n",
    "ax.scatter(best_depth, best_score, color = \"red\")\n",
    "\n",
    "# show best depth in title \n",
    "# plot tells us the depth that acheived the best score under cross validation \n",
    "# we now have a good estimate about the optimal depth/complexity of model\n",
    "l = ax.set(title = \"Best Depth : \" + str(best_depth),\n",
    "       xlabel = \"Depth\", \n",
    "       ylabel = \"CV Score\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.5775890231950344, 0.5323212536728698)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "T = DecisionTreeClassifier(max_depth = best_depth)\n",
    "T.fit(X_train, y_train)\n",
    "T.score(X_train, y_train), T.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import MLPClassifier\n",
    "from sklearn.neural_network import MLPClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 1, loss = 2.82087233\n",
      "Iteration 2, loss = 1.41000771\n",
      "Iteration 3, loss = 1.29333303\n",
      "Iteration 4, loss = 1.22556707\n",
      "Iteration 5, loss = 1.19642075\n",
      "Iteration 6, loss = 1.18248438\n",
      "Iteration 7, loss = 1.16338179\n",
      "Iteration 8, loss = 1.14757996\n",
      "Iteration 9, loss = 1.13255827\n",
      "Iteration 10, loss = 1.11605262\n",
      "Iteration 11, loss = 1.09706443\n",
      "Iteration 12, loss = 1.08219617\n",
      "Iteration 13, loss = 1.07260558\n",
      "Iteration 14, loss = 1.05703257\n",
      "Iteration 15, loss = 1.05113350\n",
      "Iteration 16, loss = 1.03571532\n",
      "Iteration 17, loss = 1.03064688\n",
      "Iteration 18, loss = 1.02216074\n",
      "Iteration 19, loss = 1.01635747\n",
      "Iteration 20, loss = 1.01090824\n",
      "Iteration 21, loss = 1.00899031\n",
      "Iteration 22, loss = 1.00771506\n",
      "Iteration 23, loss = 0.99806335\n",
      "Iteration 24, loss = 0.99549236\n",
      "Iteration 25, loss = 0.99571591\n",
      "Iteration 26, loss = 0.98778913\n",
      "Iteration 27, loss = 0.98670609\n",
      "Iteration 28, loss = 0.98439323\n",
      "Iteration 29, loss = 0.98231237\n",
      "Iteration 30, loss = 0.98295919\n",
      "Iteration 31, loss = 0.97783571\n",
      "Iteration 32, loss = 0.97777714\n",
      "Iteration 33, loss = 0.97674772\n",
      "Iteration 34, loss = 0.97888180\n",
      "Iteration 35, loss = 0.96839443\n",
      "Iteration 36, loss = 0.97188163\n",
      "Iteration 37, loss = 0.96588647\n",
      "Iteration 38, loss = 0.96980622\n",
      "Iteration 39, loss = 0.96798938\n",
      "Iteration 40, loss = 0.96089429\n",
      "Iteration 41, loss = 0.96337297\n",
      "Iteration 42, loss = 0.95983122\n",
      "Iteration 43, loss = 0.96115593\n",
      "Iteration 44, loss = 0.96261491\n",
      "Iteration 45, loss = 0.96145668\n",
      "Iteration 46, loss = 0.96217455\n",
      "Iteration 47, loss = 0.95513274\n",
      "Iteration 48, loss = 0.95642612\n",
      "Iteration 49, loss = 0.95597619\n",
      "Iteration 50, loss = 0.95482385\n",
      "Iteration 51, loss = 0.95534252\n",
      "Iteration 52, loss = 0.95211792\n",
      "Iteration 53, loss = 0.95199871\n",
      "Iteration 54, loss = 0.95437727\n",
      "Iteration 55, loss = 0.95660251\n",
      "Iteration 56, loss = 0.95021395\n",
      "Iteration 57, loss = 0.95060919\n",
      "Iteration 58, loss = 0.95391177\n",
      "Iteration 59, loss = 0.95302867\n",
      "Iteration 60, loss = 0.95035978\n",
      "Iteration 61, loss = 0.94692987\n",
      "Iteration 62, loss = 0.94907168\n",
      "Iteration 63, loss = 0.94523643\n",
      "Iteration 64, loss = 0.94923157\n",
      "Iteration 65, loss = 0.94671176\n",
      "Iteration 66, loss = 0.94566552\n",
      "Iteration 67, loss = 0.94589239\n",
      "Iteration 68, loss = 0.94648147\n",
      "Iteration 69, loss = 0.94366930\n",
      "Iteration 70, loss = 0.94340929\n",
      "Iteration 71, loss = 0.94486085\n",
      "Iteration 72, loss = 0.94872624\n",
      "Iteration 73, loss = 0.95045739\n",
      "Iteration 74, loss = 0.94556656\n",
      "Iteration 75, loss = 0.94431677\n",
      "Iteration 76, loss = 0.94970851\n",
      "Iteration 77, loss = 0.94085559\n",
      "Iteration 78, loss = 0.94801304\n",
      "Iteration 79, loss = 0.94386651\n",
      "Iteration 80, loss = 0.94339787\n",
      "Iteration 81, loss = 0.94263574\n",
      "Iteration 82, loss = 0.94095797\n",
      "Iteration 83, loss = 0.93845578\n",
      "Iteration 84, loss = 0.94316032\n",
      "Iteration 85, loss = 0.94318221\n",
      "Iteration 86, loss = 0.93835279\n",
      "Iteration 87, loss = 0.94159410\n",
      "Iteration 88, loss = 0.93954722\n",
      "Iteration 89, loss = 0.94306599\n",
      "Iteration 90, loss = 0.93999312\n",
      "Iteration 91, loss = 0.94013934\n",
      "Iteration 92, loss = 0.93964112\n",
      "Iteration 93, loss = 0.94403149\n",
      "Iteration 94, loss = 0.93921321\n",
      "Iteration 95, loss = 0.93853404\n",
      "Iteration 96, loss = 0.93661593\n",
      "Iteration 97, loss = 0.93684712\n",
      "Iteration 98, loss = 0.93554379\n",
      "Iteration 99, loss = 0.93659309\n",
      "Iteration 100, loss = 0.93672942\n",
      "Iteration 101, loss = 0.93620141\n",
      "Iteration 102, loss = 0.93803581\n",
      "Iteration 103, loss = 0.93770741\n",
      "Iteration 104, loss = 0.93775392\n",
      "Iteration 105, loss = 0.94125086\n",
      "Iteration 106, loss = 0.93929207\n",
      "Iteration 107, loss = 0.93607704\n",
      "Iteration 108, loss = 0.93413067\n",
      "Iteration 109, loss = 0.93462106\n",
      "Iteration 110, loss = 0.93370959\n",
      "Iteration 111, loss = 0.93187274\n",
      "Iteration 112, loss = 0.93380454\n",
      "Iteration 113, loss = 0.93195949\n",
      "Iteration 114, loss = 0.93489969\n",
      "Iteration 115, loss = 0.93286565\n",
      "Iteration 116, loss = 0.93426044\n",
      "Iteration 117, loss = 0.93343162\n",
      "Iteration 118, loss = 0.93160169\n",
      "Iteration 119, loss = 0.93884420\n",
      "Iteration 120, loss = 0.93183164\n",
      "Iteration 121, loss = 0.93719446\n",
      "Iteration 122, loss = 0.93159892\n",
      "Iteration 123, loss = 0.93188540\n",
      "Iteration 124, loss = 0.93247898\n",
      "Iteration 125, loss = 0.93176776\n",
      "Iteration 126, loss = 0.93172032\n",
      "Iteration 127, loss = 0.93061298\n",
      "Iteration 128, loss = 0.93265672\n",
      "Iteration 129, loss = 0.93185839\n",
      "Iteration 130, loss = 0.92910999\n",
      "Iteration 131, loss = 0.93049868\n",
      "Iteration 132, loss = 0.93012697\n",
      "Iteration 133, loss = 0.93203802\n",
      "Iteration 134, loss = 0.93045721\n",
      "Iteration 135, loss = 0.93209999\n",
      "Iteration 136, loss = 0.93155690\n",
      "Iteration 137, loss = 0.92996870\n",
      "Iteration 138, loss = 0.92784915\n",
      "Iteration 139, loss = 0.93152962\n",
      "Iteration 140, loss = 0.92918453\n",
      "Iteration 141, loss = 0.93322446\n",
      "Iteration 142, loss = 0.93210463\n",
      "Iteration 143, loss = 0.92718921\n",
      "Iteration 144, loss = 0.93400564\n",
      "Iteration 145, loss = 0.93020359\n",
      "Iteration 146, loss = 0.92697044\n",
      "Iteration 147, loss = 0.92606907\n",
      "Iteration 148, loss = 0.93035585\n",
      "Iteration 149, loss = 0.92929885\n",
      "Iteration 150, loss = 0.93157736\n",
      "Iteration 151, loss = 0.93026714\n",
      "Iteration 152, loss = 0.92821945\n",
      "Iteration 153, loss = 0.92754557\n",
      "Iteration 154, loss = 0.93557372\n",
      "Iteration 155, loss = 0.92946029\n",
      "Iteration 156, loss = 0.93402698\n",
      "Iteration 157, loss = 0.93689261\n",
      "Iteration 158, loss = 0.92701499\n",
      "Training loss did not improve more than tol=0.000100 for 10 consecutive epochs. Stopping.\n"
     ]
    }
   ],
   "source": [
    "N = MLPClassifier(verbose = True, max_iter = 1000).fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 2, 2, ..., 2, 0, 2], dtype=int32)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5475024485798237"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random Forests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "fig, ax = plt.subplots(1)\n",
    "\n",
    "best_score = 0\n",
    "\n",
    "# cross validation for each of the possible model depths 1-30\n",
    "for d in range(1,30):\n",
    "    T = RandomForestClassifier(max_depth = d)\n",
    "    # Average cv_score acheived in cross validation\n",
    "    cv_score = cross_val_score(T, X_train, y_train, cv=10).mean()\n",
    "    # plot avg cv_score (in black)\n",
    "    ax.scatter(d, cv_score, color = \"black\")\n",
    "    # identify the best possible depth by cv_score\n",
    "    if cv_score > best_score:\n",
    "        best_depth = d\n",
    "        best_score = cv_score\n",
    "\n",
    "#highlight the best depth, best score value in red\n",
    "ax.scatter(best_depth, best_score, color = \"red\")\n",
    "\n",
    "# show best depth in title \n",
    "# plot tells us the depth that acheived the best score under cross validation \n",
    "# we now have a good estimate about the optimal depth/complexity of model\n",
    "l = ax.set(title = \"Best Depth : \" + str(best_depth),\n",
    "       xlabel = \"Depth\", \n",
    "       ylabel = \"CV Score\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7451813132963084 0.5582761998041136\n"
     ]
    }
   ],
   "source": [
    "T = RandomForestClassifier(max_depth = best_depth)\n",
    "T.fit(X_train,y_train)\n",
    "print(T.score(X_train,y_train),T.score(X_test,y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Support Vector Machine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC()"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import svm\n",
    "vector = svm.SVC()\n",
    "vector.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5913100294021562 0.5568070519098922\n"
     ]
    }
   ],
   "source": [
    "print(vector.score(X_train,y_train),vector.score(X_test,y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "DSU_NBA_Data_Cleaning.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
