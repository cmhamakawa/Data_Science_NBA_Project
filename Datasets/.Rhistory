which(x == min(x-y))
diff <- x-y
diff
which(diff == min(diff))
z <- c(20, 35, 40)
t <- 28
z- t
all(diff <=0)
diff <- c(diff, 0)
all(diff <= 0)
diff <=0
z- t
diff1 <- zit
diff1 <- z - t
diff1
diff1[m_diff1 <= 0] <- max(m_diff) + 1
diff1[diff1 <= 0] <- max(diff1) + 1
diff1
which(diff1 == min(diff1))
z
t
knitr::opts_chunk$set(echo = TRUE)
iowatest <- read.table("iowatest.txt")
iowatest <- read.delim("iowatest.txt")
iowatest
iowatest$City1 <- ifelse(iowatest$City == "Iowa City",1,0)
iowatest
lm(Test~City1, data = iowatest)
my_model <- lm(Test~City1, data = iowatest)
city_model <- lm(Test~City1, data = iowatest)
summary(city_model)
#summary(city_model)
anova(city_model)
summary(city_model)
anova(city_model)
summary(city_model)
b0_hat <- my_model$coefficients[1]
my_model$coefficients[1]
summary(my_model)$coefficients["(Intercept)", ][[2]]
b0_hat <- my_model$coefficients[2]
summary(my.model)$coefficients["City1", ][[2]]
summary(my_model)$coefficients["City1", ][[2]]
big_t <- (b0_hat - 0)/b0_se
b0_se <- summary(my_model)$coefficients["City1", ][[2]]
big_t <- (b0_hat - 0)/b0_se
big_t <- unname(big_t)
big_t
t <- qt(1-0.05, 131)
t
t
big_t
b0_hat <- my_model$coefficients[2]
b0_se <- summary(my_model)$coefficients["City1", ][[2]]
big_t <- (b0_hat - 0)/b0_se
big_t <- unname(big_t)
big_t
lm(Test~City1, data = iowatest)
iowatest
poverty_model <- lm(Test ~ Poverty, data = iowatest)
poverty_model
summary(poverty_model)
anova(poverty_model)
summary(poverty_model)
par(mfrow=c(2,2))
plot(poverty_model)
N = nrow(iowatest)
n <- nrow(iowatest)
4/n
plot(poverty_model)[4]
plot(poverty_model)
plot(poverty_model)[[4]]
plot(poverty_model)
leverage = hatvalues(poverty_model)
leverage
which(leverage >= 4/n)
n <- nrow(iowatest)
4/n
leverage = unname(hatvalues(poverty_model))
which(leverage >= 4/n)
n <- nrow(iowatest)
cutoff <- 4/n
leverage = unname(hatvalues(poverty_model))
which(leverage >= cutoff)
n
rstandard(poverty_model)
n <- nrow(iowatest)
cutoff <- 4/n
leverage_set <- cbind(unname(hatvalues(poverty_model)), rstandard(poverty_model))
leverage_set
#which(leverage >= cutoff)
#rstandard(poverty_model)
n <- nrow(iowatest)
cutoff <- 4/n
leverage_set <- data.frame(leverage = unname(hatvalues(poverty_model)), rstandard = rstandard(poverty_model))
leverage_set
#which(leverage >= cutoff)
#rstandard(poverty_model)
leverage_set$rstandard >= 2 | leverage_set$rstandard <=-2
which(leverage_set$rstandard >= 2 | leverage_set$rstandard <=-2)
which(leverage_set$leverage >= cutoff)
which(leverage_set$leverage >= cutoff) & which(leverage_set$rstandard >= 2 | leverage_set$rstandard <=-2)
which(leverage_set$leverage >= cutoff & (leverage_set$rstandard >= 2 | leverage_set$rstandard <=-2))
which(leverage_set$leverage >= cutoff)
which(leverage_set$rstandard >= 2 | leverage_set$rstandard <=-2)
high_res <- which(leverage_set$rstandard >= 2 | leverage_set$rstandard <=-2)
high_lvg <- which(leverage_set$leverage >= cutoff)
high_lvg[high_lvg %in% high_res]
n <- nrow(iowatest)
cutoff <- 4/n
leverage_set <- data.frame(leverage = unname(hatvalues(poverty_model)), rstandard = rstandard(poverty_model))
high_lvg <- which(leverage_set$leverage >= cutoff)
high_res <- which(leverage_set$rstandard >= 2 | leverage_set$rstandard <=-2)
high_lvg
high_res
n <- nrow(iowatest)
cutoff <- 4/n
leverage_set <- data.frame(leverage = unname(hatvalues(poverty_model)), rstandard = stdres(poverty_model))
high_res
high_lvg
## PROBLEM 5
The null hypothesis is that B1 = 0, or that the null model is true and that there is no linear association between poverty and test score.  The alternative hypothesis is that B1 != 0, and that our full model is true.  In this case, it means that there is a linear association between poverty and test scores.  Using a significance level of 0.05, we reject the null
summary(poverty_model)
anova(poverty_model)
knitr::opts_chunk$set(echo = TRUE)
iowatest <- read.delim("iowatest.txt")
iowatest$City1 <- ifelse(iowatest$City == "Iowa City",1,0)
city_model <- lm(Test~City1, data = iowatest)
summary(city_model)
summary(poverty_model)
poverty_model <- lm(Test ~ Poverty, data = iowatest)
poverty_model
anova(poverty_model)
summary(poverty_model)
plot(iowatest$Poverty, iowatest$Test, main = "Title", xlab = "Poverty")
abline(poverty_model, col = 'red')
abline(poverty_model, col = 'red')
anova(poverty_model)
summary(poverty_model)
plot(iowatest$Poverty, iowatest$Test, main = "Title", xlab = "Poverty")
abline(poverty_model, col = 'red')
which(leverage_set == max(leverage_set))
cutoff <- 4/n
par(mfrow=c(2,2))
plot(poverty_model)
cutoff <- 4/n
n <- nrow(iowatest)
cutoff <- 4/n
leverage_set <- data.frame(leverage = unname(hatvalues(poverty_model)), rstandard = rstandard(poverty_model))
which(leverage_set == max(leverage_set))
high_lvg <- which(leverage_set$leverage > cutoff)
high_res <- which(leverage_set$rstandard > 2 | leverage_set$rstandard <-2)
n <- nrow(iowatest)
cutoff <- 4/n
leverage_set <- data.frame(leverage = unname(hatvalues(poverty_model)), rstandard = rstandard(poverty_model))
which(leverage_set == max(leverage_set))
which(leverage_set == max(leverage_set))
high_lvg <- which(leverage_set$leverage > cutoff)
high_res <- which(leverage_set$rstandard > 2 | leverage_set$rstandard <-2)
high_res <- which(leverage_set$rstandard > 2 | leverage_set$rstandard < -2)
high_lvg
high_res
which(leverage_set == max(leverage_set))
which(leverage_set == max(leverage_set))
which(leverage == max(leverage))
n <- nrow(iowatest)
cutoff <- 4/n
leverage_set <- data.frame(leverage = unname(hatvalues(poverty_model)), rstandard = rstandard(poverty_model))
which(leverage == max(leverage))
n <- nrow(iowatest)
cutoff <- 4/n
leverage = unname(hatvalues(poverty_model))
leverage_set <- data.frame(leverage = unname(hatvalues(poverty_model)), rstandard = rstandard(poverty_model))
which(leverage == max(leverage))
high_lvg <- which(leverage_set$leverage > cutoff)
high_res <- which(leverage_set$rstandard > 2 | leverage_set$rstandard < -2)
high_lvg
high_res
# 27
t
t
t <- qt(1-0.05, 131) # change to 0.025?
t
anova(poverty_model)
summary(poverty_model)
plot(iowatest$Poverty, iowatest$Test, main = "Test Scores vs Poverty", xlab = "Poverty")
abline(poverty_model, col = 'red')
par(mfrow=c(2,2))
plot(poverty_model)[[4]]
plot(poverty_model, which = 5)
plot(poverty_model, which = 5)
abline(v=4/n)
plot(poverty_model, which = 5)
abline(v=4/n, col = "blue")
plot(poverty_model, which = 5)
abline(v=4/n, col = "blue")
abline(h = 2, col = "purple")
abline(h = -2, col "purple")
plot(poverty_model, which = 5)
abline(v=4/n, col = "blue")
abline(h = 2, col = "purple")
abline(h = -2, col="purple")
plot(poverty_model, which = 5)
abline(v=4/n, col = "blue")
abline(h = 2, col = "purple")
abline(h = -2, col="purple")
knitr::opts_chunk$set(echo = TRUE)
nba_df11 <- nba_df1[years_of_exp == 1,]
nba_df <- read.csv("preprocessed_nba_dataset(w_years_of_exp).csv")
setwd("~/Documents/DSU_NBA_Project/Datasets")
nba_df <- read.csv("preprocessed_nba_dataset(w_years_of_exp).csv")
library(readr)
preprocessed_nba_dataset_w_years_of_exp_ <- read_csv("preprocessed_nba_dataset(w_years_of_exp).csv")
View(preprocessed_nba_dataset_w_years_of_exp_)
nba_df <- read.csv("preprocessed_nba_dataset(w_years_of_exp).csv")
#nba_df <- read.csv("preprocessed_nba_dataset(w_years_of_exp).csv")
head(nba_df)
#nba_df <- read.csv("preprocessed_nba_dataset(w_years_of_exp).csv")
head(nba_df)
library(readr)
nba_df <- read_csv("preprocessed_nba_dataset(w_years_of_exp).csv")
View(nba_df)
nba_df <- read.csv("preprocessed_nba_dataset(w_years_of_exp).csv")
#nba_df <- read.csv("preprocessed_nba_dataset(w_years_of_exp).csv")
head(nba_df)
library(dplyr)
## for later
df <- nba_df #%>% filter(SalStartYr < 2020)
test_df <- nba_df %>% filter(SalStartYr == 2020)
salary_cap2020 <- nba_df %>% filter(SalStartYr == 2020) %>% select(salary_cap) %>% summarise(salary_cap2020 = mean(salary_cap))
salary_cap2020 <- unlist(unname(salary_cap2020))
library(tidyverse)
library(caret)
library(leaps)
drop <- c("X","Per_of_Salary_Cap", "salary_cap")
nba_df1 = df[,!(names(df) %in% drop)]
head(nba_df1)
nba_df11 <- nba_df1[years_of_exp == 1,]
nba_df11 <- nba_df1[nba_df1$years_of_exp == 1,]
best_subset <- regsubsets(Salary~., data = nba_df1, method = "forward", nvmax = 200)
res.sum <- summary(best_subset, all.best = TRUE, matrix = T, matrix.logical = F)
res.sum
data.frame(
Adj.R2  = which.max(res.sum$adjr2),
CP = which.min(res.sum$cp),
BIC = which.min(res.sum$bic)
)
nba_df11 <- nba_df1[nba_df1$years_of_exp == 1,]
best_subset1 <- regsubsets(Salary~., data = nba_df11, method = "forward", nvmax = 200)
best_subset1
nba_df11
nba_df11 <- nba_df1[nba_df1$years_of_exp == 1,]
nba_df11
best_subset1 <- regsubsets(Salary~., data = nba_df11, method = "forward", nvmax = 200)
best_subset1
best_subset1
nba_df11 <- nba_df1[nba_df1$years_of_exp == 1,]
nba_df11
best_subset1 <- regsubsets(Salary~., data = nba_df11, method = "forward", nvmax = 200)
summary(best_subset1)
nba_df11 <- nba_df1[nba_df1$years_of_exp == 1,]
#nba_df11
best_subset1 <- regsubsets(Salary~., data = nba_df11, method = "forward", nvmax = 200)
summary(best_subset1)
nba_df11 <- nba_df1[nba_df1$years_of_exp == 1,]
head(nba_df11)
best_subset1 <- regsubsets(Salary~., data = nba_df11, method = "forward", nvmax = 200)
summary(best_subset1)
drop <- c("X","Per_of_Salary_Cap", "salary_cap")
nba_df1 = df[,!(names(df) %in% drop)]
head(nba_df1)
head(nba_df1)
drop <- c("X1","Per_of_Salary_Cap", "salary_cap")
nba_df1 = df[,!(names(df) %in% drop)]
head(nba_df1)
nba_df11 <- nba_df1[nba_df1$years_of_exp == 1,]
head(nba_df11)
best_subset1 <- regsubsets(Salary~., data = nba_df11, method = "forward", nvmax = 200)
summary(best_subset1)
nba_df11 <- nba_df1[nba_df1$years_of_exp == 1,]
head(nba_df11)
best_subset1 <- regsubsets(Salary~., data = nba_df11, method = "forward", nvmax = 200)
summary(best_subset1)
res.sum
data.frame(
Adj.R2  = which.max(res.sum$adjr2),
CP = which.min(res.sum$cp),
BIC = which.min(res.sum$bic)
)
nba_df11 <- nba_df1[nba_df1$years_of_exp == 1,]
head(nba_df11)
best_subset1 <- regsubsets(Salary~., data = nba_df11, method = "forward", nvmax = 200)
res.sum1 <- summary(best_subset1)
res.sum
data.frame(
Adj.R2  = which.max(res.sum1$adjr2),
CP = which.min(res.sum1$cp),
BIC = which.min(res.sum1$bic)
)
nba_df11 <- nba_df1[nba_df1$years_of_exp == 1,]
head(nba_df11)
best_subset1 <- regsubsets(Salary~., data = nba_df11, method = "forward", nvmax = 200)
res.sum1 <- summary(best_subset1)
res.sum1
data.frame(
Adj.R2  = which.max(res.sum1$adjr2),
CP = which.min(res.sum1$cp),
BIC = which.min(res.sum1$bic)
)
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
# Compute cross-validation error
model.ids <- 1:25 # should change to 1:26
cv.errors <-  map(model.ids, get_model_formula, best_subset1, "Salary") %>%
map(get_cv_error, data = nba_df11) %>%
unlist()
# id: model id
# object: regsubsets object
# data: data used to fit regsubsets
# outcome: outcome variable
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object)$which[id,-1]
# Get outcome variable
#form <- as.formula(object$call[[2]])
#outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
# Compute cross-validation error
model.ids <- 1:25 # should change to 1:26
cv.errors <-  map(model.ids, get_model_formula, best_subset1, "Salary") %>%
map(get_cv_error, data = nba_df11) %>%
unlist()
cv.errors
n <- which.min(cv.errors)
n
n <- which.min(cv.errors)
n
# Compute cross-validation error
model.ids <- 1:25 # should change to 1:26
cv.errors <-  map(model.ids, get_model_formula, best_subset1, "Salary") %>%
map(get_cv_error, data = nba_df11) %>%
unlist()
cv.errors
n <- which.min(cv.errors)
n
nba_df11 <- nba_df1[nba_df1$years_of_exp == 1,]
head(nba_df11)
best_subset1 <- regsubsets(Salary~., data = nba_df11, method = "forward", nvmax = 200)
res.sum1 <- summary(best_subset1)
res.sum1[10]
data.frame(
Adj.R2  = which.max(res.sum1$adjr2),
CP = which.min(res.sum1$cp),
BIC = which.min(res.sum1$bic)
)
nba_df11 <- nba_df1[nba_df1$years_of_exp == 1,]
head(nba_df11)
best_subset1 <- regsubsets(Salary~., data = nba_df11, method = "forward", nvmax = 200)
res.sum1 <- summary(best_subset1)
res.sum1$which
data.frame(
Adj.R2  = which.max(res.sum1$adjr2),
CP = which.min(res.sum1$cp),
BIC = which.min(res.sum1$bic)
)
nba_df11 <- nba_df1[nba_df1$years_of_exp == 1,]
head(nba_df11)
best_subset1 <- regsubsets(Salary~., data = nba_df11, method = "forward", nvmax = 200)
res.sum1 <- summary(best_subset1)
res.sum1$which[10]
data.frame(
Adj.R2  = which.max(res.sum1$adjr2),
CP = which.min(res.sum1$cp),
BIC = which.min(res.sum1$bic)
)
res.sum1
nba_df11 <- nba_df1[nba_df1$years_of_exp != 1,]
head(nba_df11)
best_subset1 <- regsubsets(Salary~., data = nba_df11, method = "forward", nvmax = 200)
res.sum1 <- summary(best_subset1)
res.sum1
data.frame(
Adj.R2  = which.max(res.sum1$adjr2),
CP = which.min(res.sum1$cp),
BIC = which.min(res.sum1$bic)
)
# id: model id
# object: regsubsets object
# data: data used to fit regsubsets
# outcome: outcome variable
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object)$which[id,-1]
# Get outcome variable
#form <- as.formula(object$call[[2]])
#outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
# id: model id
# object: regsubsets object
# data: data used to fit regsubsets
# outcome: outcome variable
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object)$which[id,-1]
# Get outcome variable
#form <- as.formula(object$call[[2]])
#outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
# Compute cross-validation error
model.ids <- 1:25 # should change to 1:26
cv.errors <-  map(model.ids, get_model_formula, best_subset1, "Salary") %>%
map(get_cv_error, data = nba_df11) %>%
unlist()
cv.errors
n <- which.min(cv.errors)
n
summaru(city_model)$[[3]]
summary(city_model)$[[3]]
summary(city_model)[[3]]
summary(city_model)$t
iowatest <- read.delim("iowatest.txt")
iowatest$City1 <- ifelse(iowatest$City == "Iowa City",1,0)
head(iowatest)
city_model <- lm(Test~City1, data = iowatest)
summary(city_model)
#anova(city_model)
summary(city_model)$Coefficients:
t <- qt(1-0.05, 131) # change to 0.025?
summary(city_model)['Coefficients:',]
summary(city_model)$Residuals
summary(city_model)$'Residuals:'
summary(city_model)
summary(city_model)[1,]
summary(city_model)[[1]]
summary(city_model)[[3]]
summary(city_model)[[2]]
summary(city_model)[[2]]
summary(city_model)[[2]]$City1
summary(city_model)[[2]]
summary(city_model)[[2]][1,]
b0_hat <- city_model$coefficients[2]
b0_se <- summary(city_model)$coefficients["City1", ][[2]]
big_t <- (b0_hat - 0)/b0_se
big_t <- unname(big_t)
big_t
t <- qt(1-0.05, 131)
t
poverty_model <- lm(Test ~ Poverty, data = iowatest)
#anova(poverty_model)
summary(poverty_model)
plot(iowatest$Poverty, iowatest$Test, main = "Test Scores vs Poverty", xlab = "Poverty")
abline(poverty_model, col = 'red')
poverty_model$coefficients
poverty_model$coefficients[1]
plot(iowatest$Poverty, iowatest$Test, main = "Test Scores vs Poverty", xlab = "Poverty")
abline(poverty_model, col = 'red')
n <- nrow(iowatest)
cutoff <- 4/n
leverage = unname(hatvalues(poverty_model))
leverage_set <- data.frame(leverage = unname(hatvalues(poverty_model)), rstandard = rstandard(poverty_model))
max_lvg_pt <- which(leverage == max(leverage))
bad_lvg <- which(leverage_set$leverage > cutoff & (leverage_set$rstandard > 2 | leverage_set$rstandard < -2))
bad_lvg
n <- nrow(iowatest)
cutoff <- 4/n
plot(poverty_model, which = 5)
abline(v=4/n, col = "blue")
abline(h = 2, col = "purple")
abline(h = -2, col="purple")
leverage = unname(hatvalues(poverty_model))
leverage_set <- data.frame(leverage = unname(hatvalues(poverty_model)), rstandard = rstandard(poverty_model))
max_lvg_pt <- which(leverage == max(leverage))
bad_lvg <- which(leverage_set$leverage > cutoff & (leverage_set$rstandard > 2 | leverage_set$rstandard < -2))
bad_lvg
leverage = unname(hatvalues(poverty_model))
leverage_set <- data.frame(leverage = unname(hatvalues(poverty_model)), rstandard = rstandard(poverty_model))
max_lvg_pt <- which(leverage == max(leverage))
bad_lvg <- which(leverage_set$leverage > cutoff & (leverage_set$rstandard > 2 | leverage_set$rstandard < -2))
length(bad_lvg)
