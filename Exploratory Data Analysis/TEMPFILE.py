# -*- coding: utf-8 -*-
"""DSU_NBA_Data_Cleaning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WhOwWTwCBkkYw-qesO8sgxkFe_ZqglxL

**NBA Data Cleaning**

We first import the pandas package.
"""

import pandas as pd

"""We obtain the dataset link from GitHub (remote respository).  The dataset is called **Merged**  We read the excel file into a data frame."""

url1 = 'https://github.com/cmhamakawa/Data_Science_NBA_Project/blob/master/Datasets/Merged_NBA_Dataset(1970-2019).xlsx?raw=true'
adv_df = pd.read_excel(url1) # advanced data set is now in data frame
adv_df[1:6]

"""We drop the first two columns (Unnamed: 0, Rk) and we add the column years of experience (years_of_exp)."""

adv_df.drop(adv_df.columns[[0,1]], axis = 1, inplace = True)
adv_df['years_of_exp'] = adv_df.groupby('Player').cumcount()

"""We assume that if an NBA player is in the dataset, they have at least one year of experience.  In other words, we count years of experience at the end of a season.  So, we add 1 to the column years of experience."""

def add_one(x):
	return x + 1
adv_df['years_of_exp'] = adv_df['years_of_exp'].apply(add_one)

adv_df[adv_df['Player'] == 'LeBron James']

"""We only use players from the years 1990 and on.

"""

adv_df = adv_df[adv_df['StartYr']>=1990]
adv_df[:6]

"""We examine missing value counts and remove rows/columns as needed."""

print("Shape", adv_df.shape)
#examine missing value counts
counts = {}
for column in adv_df:
  s = adv_df[column].isna().sum()
  if s>0:
    counts[column] = s

counts

#FASTER WAY TO CHECK NAs
print("Shape", adv_df.shape)

NAs = dict(adv_df.isna().sum())
output = dict((k, v) for k, v in NAs.items() if v > 0)
output

#drop rows with remaining NAN values
adv_df.dropna(inplace=True)
adv_df.shape

"""We get rid of columns that are not relevant to our purpose of predicting salaries.

We load the salary cap dataset, **NBA_Salary_Cap**.
"""

# adjusting salary cap for inflation (not needed for final data set)

# !pip install cpi
# import cpi
# def inflate_column(data, column):
#     """
#     Adjust for inflation the series of values in column of the   
#     dataframe data
#     """
#     return data.apply(lambda x: cpi.inflate(x[column], 
#                       x.year), axis=1)     # converts the dollar amount in particular year to today's value
    
url2 = 'https://github.com/cmhamakawa/Data_Science_NBA_Project/blob/master/Datasets/NBA_Salary_Cap.xlsx?raw=true'
salary_cap_data = pd.read_excel(url2) # advanced data set is now in data frame

# salary cap data from 1990-2020
salary_cap_data = salary_cap_data.iloc[6:38]
salary_cap_data

# Christine
adv_df.columns

"""We format the salary_cap dataset and merge it with our main dataset.


"""

# Merge salary_cap_data with advanced dataframe

def partition(val):
  return int(val.partition("-")[0])
  
salary_cap_data.Year = salary_cap_data.Year.apply(partition)

salary_cap_data

"""We mapped/matched Salary Cap Years in Salary Cap data set to the Salary Start Year in our large data set with player statistics."""

cap_dict = dict(zip(salary_cap_data.Year, salary_cap_data.SalaryCap))
cap_dict_adjusted = dict(zip(salary_cap_data.Year, salary_cap_data.InflationSalaryCap))
adv_df['salary_cap'] = adv_df.SalStartYr.map(cap_dict)
#adv_df['salary_cap'] = adv_df.year.map(cap_dict)
adv_df['salary_cap_adjusted'] = adv_df.SalStartYr.map(cap_dict_adjusted)

# ADHVAITH
adv_df.head()

adv_df.shape

"""We make our predictor column, Percent of Salary Cap (Per_of_Salary_Cap) by dividing the player's salary for that year by the salary_cap for that same year."""

# normalizing salaries by dividing salary by salary cap of that year
adv_df['Per_of_Salary_Cap'] = adv_df.Salary / adv_df.salary_cap
adv_df.head()

list(adv_df.columns)

"""We download our preprocessed dataset."""

from google.colab import files
adv_df.to_csv('preprocessed_nba_dataset(1990-2020).csv') 
files.download('preprocessed_nba_dataset(1990-2020).csv')